/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJFrame.java
 *
 * Created on Jun 3, 2010, 4:54:33 PM
 */

package gui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import simulator.DeterministicDistribution;
import simulator.Distribution;
import simulator.DistributionType;
import simulator.ExponentialDistribution;
import simulator.ParetoDistribution;
import simulator.SPPDistribution;
import simulator.UniformDistribution;
import simulator.Utils;

/**
 *
 * @author andreazagnoli
 */
public class SimulatorFrame extends javax.swing.JFrame implements ActionListener {

    /**
	 * 
	 */
	private static final long serialVersionUID = -8210143930250467129L;
	
    public SimulatorFrame() {
        initComponents();
        
        distCbx.setModel(new DefaultComboBoxModel(simulator.DistributionType.values()));
        distCbx.addActionListener(this);
        generateReport.addActionListener(this);
        placeholderPanel.setLayout(new BorderLayout());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        placeholderPanel = new javax.swing.JPanel();
        distCbx = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        lambda = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        runs = new javax.swing.JTextField();
        generateReport = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 338, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 283, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("RandomNumber", jPanel1);

        jLabel1.setText("Distribution type");

        org.jdesktop.layout.GroupLayout placeholderPanelLayout = new org.jdesktop.layout.GroupLayout(placeholderPanel);
        placeholderPanel.setLayout(placeholderPanelLayout);
        placeholderPanelLayout.setHorizontalGroup(
            placeholderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 288, Short.MAX_VALUE)
        );
        placeholderPanelLayout.setVerticalGroup(
            placeholderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 97, Short.MAX_VALUE)
        );

        distCbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Lambda:");

        jLabel3.setText("# runs:");

        generateReport.setText("Generate report");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(generateReport)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, placeholderPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2Layout.createSequentialGroup()
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jLabel2)
                                .add(jLabel1)
                                .add(jLabel3))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(runs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(lambda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(distCbx, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 171, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(distCbx, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(lambda, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(runs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(placeholderPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(generateReport)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("VariableTraffic", jPanel2);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 338, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 283, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("M/G/1", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox distCbx;
    private javax.swing.JButton generateReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField lambda;
    private javax.swing.JPanel placeholderPanel;
    private javax.swing.JTextField runs;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JPanel additionalParametersPanel;
    
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == distCbx) {
			handlePanel();
		}
		else if (e.getSource() == this.generateReport) {
			handleSimulation();
		}
	}

	private void handlePanel() {
		DistributionType type = (DistributionType)distCbx.getSelectedItem();
		switch (type) {
			case SPP: {
				placeholderPanel.removeAll();
				placeholderPanel.add(additionalParametersPanel = new SPPPanel());
				placeholderPanel.repaint();
				break;
			}
			case Pareto: {
				placeholderPanel.removeAll();
				placeholderPanel.add(additionalParametersPanel = new ParetoPanel());
				placeholderPanel.repaint();
				break;
			}
			default: 
				placeholderPanel.removeAll();
		}
		this.pack();
		this.repaint();
	}
	
	private void handleSimulation() {
		DistributionType type = (DistributionType)distCbx.getSelectedItem();
		Distribution dist = null;
		if (!checkParameters()) {
			showDialogMessage("Parameters missing or wrong");
			return ; // pianto unA grana
		}
		switch (type) {
			case Deterministic: {
				dist = new DeterministicDistribution((float)getLambda());
				break;
			}
			case SPP: {
				SPPPanel p = (SPPPanel)additionalParametersPanel;
				if (!p.checkParameters()) {
					showDialogMessage("Additional parameters missing or wrong");
					return ; // pianto una grana
				}
					
				double lambda = getLambda();
				double p0 = p.getP0();
				double p1 = p.getP1();
				int k = p.getK();
				double lambda0 = Utils.computeSPPLambda0(lambda,p0,p1,k);
				double lambda1 = lambda0 * 30;
				dist = new SPPDistribution((float)lambda0,(float)lambda1,(float)p0,(float)p1);
				break;
			}
			case Pareto: {
				ParetoPanel p = (ParetoPanel)additionalParametersPanel;
				if (!p.checkParameters()) {
					showDialogMessage("Additional parameters missing or wrong");
					return ; // pianto una grana
				}
				
				float lambda = (float)getLambda();
				float alfa = (float)p.getAlfa();
				float beta = ((1/lambda) * (alfa - 1))/alfa;
				dist = new ParetoDistribution(alfa,beta);
				break;
			}
			case Uniform: {
				dist = new UniformDistribution();
				break ;
			}
			case Exponential: {
				dist = new ExponentialDistribution((float)getLambda());
				break ;
			}
		}
		
		Utils.generateTrafficWithDifferentVariability((float)getLambda(),dist,getRuns());
	}
	
	private boolean checkParameters() {
		if (lambda.getText().equals("") || runs.getText().equals(""))
			return false;
		try {
			Double.parseDouble(lambda.getText());
			Integer.parseInt(runs.getText());
			return true;
		}
		catch (NumberFormatException e) { }
		return false;
	}
	
	public double getLambda() {
		if (lambda.getText().equals(""))
			return -1;
		try {
			return Double.parseDouble(lambda.getText());
		}
		catch (NumberFormatException e) { }
		return -1;
	}
	
	public int getRuns() {
		if (runs.getText().equals(""))
			return -1;
		try {
			return Integer.parseInt(runs.getText());
		}
		catch (NumberFormatException e) { }
		return -1;
	}
	
	private void showDialogMessage(String msg) {
		JOptionPane.showMessageDialog(this,msg,"Paramters error",JOptionPane.ERROR_MESSAGE);
	}
}
